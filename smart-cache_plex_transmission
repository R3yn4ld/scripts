#!/bin/bash
# This script gets actives torrents list from Transmission, playing sessions from Plex,  and tells rsync to copy them from array to cache drive.
# It also cleans oldest modified files by rsyncing them back to array (in case of modification).
# Hardlink are preserved
#
# By Reynald - 06 may 2020 - mailto:reynald.rollet@gmail.com
# v.0.5.11

# settings
{
        #Transmission
        RPC_USER="redacted"
        RPC_PASSWORD="redacted"
        RPC_HOST="192.168.1.28:9091"
        RPC_MAX_CACHED_SESSIONS=15

        #Plex
        PLEX_TOKEN="redacted"
        PLEX_HOST="192.168.1.20:32400"
        PLEX_MAX_CACHED_SESSIONS=10

        #Rsync path
        STORAGE_PATH="/mnt/user0/data/"
        CACHE_PATH="/mnt/cache/data/"
        CACHE_DISK="/dev/mapper/nvme0n1p1"
        CACHE_MIN_FREE_SPACE_PCT="90"
        
        #Parameters
        LOG_MAX_SIZE=30000000
        NOISY_HOUR_START=9
        NOISY_HOUR_STOP=21
        
        #Options (set to true or false)
        TRANSMISSION_ENABLED=true
        PLEX_ENABLED=true
        PLEX_CACHE_NEXT_EPISODE=true
        PLEX_CACHE_SEASON_TILL_END=true
        VERBOSE=false
        DEBUG=false
}
##### No modification below this line #####

sys_checks() {
# lock
        if [[ -f /var/lock/sma ]]; then
                echo "Error: Script already running"
                exit 1
        else
                touch /var/lock/smart-cache_plex_ttransmission
                $VERBOSE && echo "Welcome to $0"
        fi

# check that path are mounted
        if [[ ! -d $STORAGE_PATH ]] || [[ ! -d $CACHE_PATH ]];
        then
                echo "Error: Paths are not accessibles"
                rm /var/lock/smart-cache_plex_ttransmission
                exit 1
        fi
return
# cut log
        LOG_FILE=$(echo $0 | sed '|\/script|\/log.txt|')
        if [[ $(stat -c %s $LOG_FILE) -ge $LOG_MAX_SIZE ]]
        then
            $VERBOSE && echo "Info: Emptying log file"
            echo "" > $LOG_FILE
        fi
        
}

#######################
# Transfers functions #
#######################
noisy_hours() {
# return 0 if time in noisy hour range
    if [[ $(date +%H) -ge $NOISY_HOUR_START ]] && [[ $(date +%H) -le $NOISY_HOUR_STOP ]]
    then
        return 0
    else
        return 1
    fi
}
rsync_transfer() {
# get files and path
	SOURCE_FILE=$1
	DEST_FILE=$2
	SOURCE_PATH=$3
	DEST_PATH=$4
	RS_OPTIONS=$5
	$DEBUG && echo " -- Debug:Rsync_transfer function parameters:"
    $DEBUG && echo " --- Debug: Source file: $SOURCE_FILE"
    $DEBUG && echo " --- Debug: Dest.  file: $DEST_FILE"
    $DEBUG && echo " --- Debug: Source path: $SOURCE_PATH"
    $DEBUG && echo " --- Debug: Dest.  path: $DEST_PATH"
    $DEBUG && echo " --- Debug: Options    : $RS_OPTIONS"

# check if original file exist
        if [[ ! -f "${SOURCE_FILE}" ]] && [[ ! -f "${DEST_FILE}" ]]
        then
            echo " -- Error: Files:"
			echo "${SOURCE_FILE}"
			echo "${DEST_FILE}"
			echo "does not exist"
            return 1
        elif [[ "${DEST_FILE}" = "${DEST_PATH}" ]] || [[ "${SOURCE_FILE}" = "${SOURCE_PATH}" ]]
        then
            
            echo " -- Error: Cannot sync root path!"
            return 1
        elif [[ ! -f "${SOURCE_FILE}" ]] && [[ "${DEST_PATH}" = "${CACHE_PATH}" ]] && [[ -f "${DEST_FILE}" ]]
        then
            if noisy_hours
            then
                $VERBOSE && echo " -- Info: File is on cache only. Inside noisy hours, sending to storage"
                rsync_transfer "${DEST_FILE}" "${SOURCE_FILE}" "${DEST_PATH}" "${SOURCE_PATH}"
            else
                echo " -- Warning: File is on cache only. Outside of noisy hours, doing nothing"
            fi
            return
        elif [[ -f "${DEST_FILE}" ]] && [[ "${DEST_PATH}" = "${CACHE_PATH}" ]]
        then
            $VERBOSE && echo " -- Info: File already cached"
            return
        fi


# get dir
        SOURCE_DIR=$(dirname "${SOURCE_FILE}")
        DEST_DIR=$(dirname "${DEST_FILE}")

# sync file
        mkdir -p "${DEST_DIR}"
        $VERBOSE && echo " -- Info: Syncing ${SOURCE_FILE} to ${DEST_FILE}"
        rsync -avhq "${SOURCE_FILE}" "${DEST_FILE}"
        RSYNC_RESULT=$?

# sync hardlinks
        hardlink_transfer "${SOURCE_FILE}" "${DEST_FILE}" "${SOURCE_PATH}" "${DEST_PATH}" "${RS_OPTIONS}"

# remove original file if requested
        if [[ "${RS_OPTIONS}" = " --remove-source-files" ]]
        then
            $VERBOSE && echo " -- Info: Delete ${SOURCE_FILE}"
            rm "${SOURCE_FILE}"
        fi
}
hardlink_transfer() {
# get files and path
	SOURCE_FILE=$1
	DEST_FILE=$2
	SOURCE_PATH=$3
	DEST_PATH=$4
	RS_OPTIONS=$5
	
	$DEBUG && echo " -- Debug: Hardlink_transfer function parameters:"
    $DEBUG && echo " --- Debug: Source file: $SOURCE_FILE"
    $DEBUG && echo " --- Debug: Dest.  file: $DEST_FILE"
    $DEBUG && echo " --- Debug: Source path: $SOURCE_PATH"
    $DEBUG && echo " --- Debug: Dest.  path: $DEST_PATH"
    $DEBUG && echo " --- Debug: Options    : $RS_OPTIONS"


# get hardlinks from source
        find "${SOURCE_PATH}" -samefile "${SOURCE_FILE}" | while read SOURCE_LINK
        do
                if [[ ! "${SOURCE_FILE}" = "${SOURCE_LINK}" ]];
                then
                        DEST_LINK=$(echo ${SOURCE_LINK} | sed "s|`echo ${SOURCE_PATH}`|`echo ${DEST_PATH}`|")
                        # if DEST is not a hardlink
                        if [[ -f "${DEST_LINK}" ]] && [[ ! `stat -c %h "${DEST_LINK}"` -gt 1 ]]
                        then
                            $VERBOSE && echo " -- Info: Creating hardlink: ${DEST_LINK}"
                            # rm destination file if exist
                            [[ -f "${DEST_LINK}" ]] && rm "${DEST_LINK}"
                            DEST_LINK_DIR=$(dirname "${DEST_LINK}")
# and create hardlinks on destination
                            mkdir -p "${DEST_LINK_DIR}"
                            ln "${DEST_FILE}" "${DEST_LINK}"
                            if [[ ! $? -eq 0 ]] 
                            then
                                echo " -- Error: cannot hardlink ${DEST_FILE}"
                                echo "to ${DEST_LINK}"
                                return 1
                            fi
                        else
                            $VERBOSE && echo " -- Info: Hardlink exists"
                        fi
# remove hardlinks from source
                        if [[ "${RS_OPTIONS}" = " --remove-source-files" ]]
                        then
                            $VERBOSE && echo " -- Info: Delete hardlink ${SOURCE_LINK}"
                            rm "${SOURCE_LINK}"
                        fi

                fi
        done
}

################
# Transmission #
################
transmission_cache() {
# get full torrent list
        # get header for this Transmission RPC session
        RPC_LOGIN=" --user ${RPC_USER}:${RPC_PASSWORD}"
        SESSION_HEADER=$(curl --max-time 5 --silent --anyauth${RPC_LOGIN} ${RPC_HOST}/transmission/rpc/ | sed 's/.*<code>//g;s/<\/code>.*//g')
        if [[ -z $SESSION_HEADER ]];
        then
                echo "Error: Cannot connect to transmission"
                return 1
        fi
        # get torrent list
        TORRENT_LIST=$(curl --silent --anyauth${RPC_LOGIN} --header "${SESSION_HEADER}" "http://${RPC_HOST}/transmission/rpc" \
           -d "{\"method\":\"torrent-get\",\"arguments\": {\"ids\":\"recently-active\",\"fields\":[\"id\",\"activityDate\",\"name\",\"downloadDir\",\"files\",\"status\"]}}" \
           | jq '.arguments.torrents|=sort_by(-.activityDate)')
        NB_TORRENTS=$(echo ${TORRENT_LIST} | jq '.arguments.torrents | length')

        echo " -----------------------"
        echo "$NB_TORRENTS active(s) torrent(s):"
        echo " -----------------------"
# for each torrent
        if [[ $NB_TORRENTS -gt $RPC_MAX_CACHED_SESSIONS ]]
        then
            NB_TORRENTS=$RPC_MAX_CACHED_SESSIONS
            echo "Warning: caching is limited to $RPC_MAX_CACHED_SESSIONS torrents  (user setting)"
        fi

        for i in `seq $NB_TORRENTS`
        do
        # get torrent path
                TORRENT_PATH=$(echo ${TORRENT_LIST} | jq '.arguments.torrents['$(($i - 1))'].downloadDir' | sed 's|\"||g' | sed 's|\/data|data|')
                TORRENT_NAME=$(echo ${TORRENT_LIST} | jq '.arguments.torrents['$(($i - 1))'].name'| sed 's|\"||g')
				TORRENT_STATUS=$(echo ${TORRENT_LIST} | jq '.arguments.torrents['$(($i - 1))'].status')
                NB_FILES=$(echo ${TORRENT_LIST} | jq '.arguments.torrents['$(($i - 1))'].files | length')
				if [[ $TORRENT_STATUS == 4 ]]
				then
					echo " - $i/$NB_TORRENTS: $TORRENT_NAME (downloading)"
					$VERBOSE && echo " - Info: Doing nothing"
				else
					echo " $i/$NB_TORRENTS: ${TORRENT_NAME} (seeding)"
        # for each file not downloading
					for j in `seq $NB_FILES`
					do
# get each file path
							TORRENT_FILE=$(echo ${TORRENT_LIST} | jq '.arguments.torrents['$(($i - 1))'].files['$(($j - 1))'].name' | sed 's|\"||g')
							FILE_TO_CACHE=$(echo ${TORRENT_PATH}/${TORRENT_FILE} | sed 's|\"\"|\/|g' | sed 's|\"||g' | sed 's|data\/||g')
							$VERBOSE && echo " - Info: File $j/$NB_FILES: ${TORRENT_FILE}"
							STORAGE_FILE="${STORAGE_PATH}${FILE_TO_CACHE}"
							CACHE_FILE="${CACHE_PATH}${FILE_TO_CACHE}"
# and send to rsync
							rsync_transfer "${STORAGE_FILE}" "${CACHE_FILE}" "${STORAGE_PATH}" "${CACHE_PATH}"
					done
				fi
        done
		# [[ $NB_TORRENTS != 0 ]] && echo ""
		$VERBOSE && echo ""
}

########
# Plex #
########
plex_cache() {
# get Plex sessions
        STATUS_SESSIONS=$(curl --silent http://${PLEX_HOST}/status/sessions -H "X-Plex-Token: $PLEX_TOKEN")
        if [[ -z $STATUS_SESSIONS ]];
        then
                echo "Error: Cannot connect to plex"
                return 1
        fi

        NB_SESSIONS=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/@size)' -)
        echo " ----------------------------"
        echo "$NB_SESSIONS active(s) plex session(s):"
        echo " ----------------------------"

# for each session
        if [[ $NB_SESSIONS -gt $PLEX_MAX_CACHED_SESSIONS ]]
        then
            NB_SESSIONS=$PLEX_MAX_CACHED_SESSIONS
            echo "Warning: Caching is limited to $PLEX_MAX_CACHED_SESSIONS plex sessions (user setting)"
        fi
        for i in `seq $NB_SESSIONS`
        do
# get title
                ID=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@ratingKey)' -)
                TYPE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@type)' -)
# eventually get serie info
                if [[ $TYPE = "episode" ]]
                then
                    TYPE="Serie"
                    GRANDPARENTTITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@grandparentTitle)' -)
                    SEASON=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@parentIndex)' -)
                    TITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@title)' -)
                    EPISODE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@index)' -)
                    PARENT_ID=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@parentRatingKey)' -)
                    PARENT_NB_EPISODES=$(curl --silent http://${PLEX_HOST}/library/metadata/$PARENT_ID | xmllint --xpath 'string(//MediaContainer/Directory/@leafCount)' -)
                    PARENT_START_EPISODE=$(curl --silent http://${PLEX_HOST}/library/metadata/$PARENT_ID/children | xmllint --xpath 'string(//MediaContainer/Video[1]/@index)' -)
                    PARENT_NB_EPISODES=$(( $PARENT_NB_EPISODES + $PARENT_START_EPISODE - 1 ))
                    TITLE="$TYPE: ${GRANDPARENTTITLE} Season ${SEASON} - Episode ${EPISODE}/${PARENT_NB_EPISODES}: $TITLE"
# update nb file to cache
                    START_FILE=$EPISODE 
                    $PLEX_CACHE_NEXT_EPISODE && NB_FILES=$(( $EPISODE + 1))
                    $PLEX_CACHE_SEASON_TILL_END && NB_FILES=$(( $PARENT_NB_EPISODES ))
                elif [[ $TYPE = "movie" ]]
                then
                    TYPE="Movie"
                    TITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Video['$i']/@title)' -)
                    TITLE="$TYPE: $TITLE"                    
                    START_FILE=1
                    NB_FILES=1
                else
                    # GRANDPARENTTITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Track['$i']/@grandparentTitle)' -)
                    # PARENTTITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Track['$i']/@parentTitle)' -)
                    # TITLE=$(echo $STATUS_SESSIONS  | xmllint --xpath 'string(//MediaContainer/Track['$i']/@title)' -)                    
                    # TITLE="$TYPE: ${GRANDPARENTTITLE}: ${PARENTTITLE} - ${TITLE}"
                    TYPE="Audio"
                    TITLE="track caching not implemented"
                    TITLE="$TYPE: $TITLE"                    
                    START_FILE=0
                    NB_FILES=0
                fi
                echo " $i/$NB_SESSIONS: $TITLE"

                # if [[ $NB_FILES -gt $PLEX_MAX_CACHED_SESSIONS ]]
                # then
                    # echo "Caching is limited to $PLEX_MAX_CACHED_SESSIONS files (user setting)"
                    # NB_FILES=$(( $START_FILE + $PLEX_MAX_CACHED_SESSIONS ))
                # fi

                for j in `seq $START_FILE $NB_FILES`
                do
# get file path
                    if [[ $TYPE = "Audio" ]]
                    then
                        $VERBOSE echo " - Info: Skipping"
                    else
                        if [[ $TYPE = "Serie" ]]                
                        then
                            PLEX_FILE=$(curl --silent http://${PLEX_HOST}/library/metadata/$PARENT_ID/children | xmllint --xpath 'string(//MediaContainer/Video['$(($j - $PARENT_START_EPISODE + 1))']/Media/Part/@file)' -)
                        else
                            PLEX_FILE=$(curl --silent http://${PLEX_HOST}/library/metadata/$ID | xmllint --xpath 'string(//MediaContainer/Video/Media/Part/@file)' -)
                        fi                    
                        FILE_TO_CACHE=$(echo ${PLEX_FILE} | sed 's|\"\"|\/|g' | sed 's|\"||g' | sed 's|\/data\/||')
                        $VERBOSE && echo " - Info: File $j/$NB_FILES: $FILE_TO_CACHE"
                        STORAGE_FILE="${STORAGE_PATH}${FILE_TO_CACHE}"
                        CACHE_FILE="${CACHE_PATH}${FILE_TO_CACHE}"
# and send to rsync
                        rsync_transfer "${STORAGE_FILE}" "${CACHE_FILE}" "${STORAGE_PATH}" "${CACHE_PATH}"
                        ID=$(( $ID + 1 ))
                    fi
                done
        done
		# [[ $NB_SESSIONS != 0 ]] && echo ""
		$VERBOSE && echo ""
}

####################
# Delete old files #
####################
cleanup() {
# get free space
        a=$(df -h | grep $CACHE_DISK | awk '{ printf "%d", $5 }')
        b=$CACHE_MIN_FREE_SPACE_PCT

        echo " ---------------------"
        echo "Cache disk usage: ${a}%"
        echo " ---------------------"


        if [[ "$a" -ge "$b" ]];
        then
            echo "$a% space used, quota is $b%, cleaning"
            $VERBOSE && echo "Info: Scanning files..."
# get oldest accessed files
            find "${CACHE_PATH}" -type f -printf "%C@ %p\n" | sort -n | sed "s|`echo ${CACHE_PATH}`|%|g" | cut -d'%' -f2 | while read FILE_TO_CLEAN
            do
# loop start: get free space again
                a=$(df -h | grep $CACHE_DISK | awk '{ printf "%d", $5 }')
                b=$CACHE_MIN_FREE_SPACE_PCT
# if free space not enough
                if [[ "$a" -ge "$b" ]];
                then
                    $VERBOSE && echo " - Info: $a% space used, quota is $b%, uncaching $FILE_TO_CLEAN"
                    STORAGE_FILE="${STORAGE_PATH}${FILE_TO_CLEAN}"
                    CACHE_FILE="${CACHE_PATH}${FILE_TO_CLEAN}"
# sync back cache to storage
                    rsync_transfer "${CACHE_FILE}" "${STORAGE_FILE}" "${CACHE_PATH}" "${STORAGE_PATH}" " --remove-source-files"
                fi
# loop 
            done
        fi
        a=$(df -h | grep $CACHE_DISK | awk '{ printf "%d", $5 }')
        b=$CACHE_MIN_FREE_SPACE_PCT
        $VERBOSE && echo "Info: $a% space used, quota is $b%, nothing to do"
# prune empty directories from source dir
        $VERBOSE && echo "Info: Cleaning empty directories..."
        find "${CACHE_PATH}" -type d -not -path '*/\.*' -empty -prune -exec rmdir --ignore-fail-on-non-empty {} \;
        $VERBOSE && echo ""
}

sys_checks
$TRANSMISSION_ENABLED && transmission_cache
$PLEX_ENABLED && plex_cache
cleanup
echo ""

rm /var/lock/smart-cache_plex_ttransmission
exit 0

